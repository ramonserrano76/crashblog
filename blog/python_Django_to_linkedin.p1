import json
import random
import requests
import string



def read_creds(filename):
    '''
    Store API credentials in a safe place.
    If you use Git, make sure to add the file to .gitignore
    '''
    with open(filename) as f:
        credentials = json.load(f)
    return credentials


def create_CSRF_token():
    '''
    This function generate a random string of letters.
    It is not required by the Linkedin API to use a CSRF token.
    However, it is recommended to protect against cross-site request forgery
    For more info on CSRF https://en.wikipedia.org/wiki/Cross-site_request_forgery
    '''
    letters = string.ascii_lowercase
    token = ''.join(random.choice(letters) for i in range(20))
    return token


    
def open_url(url):
    '''
    Function to Open URL.
    Used to open the authorization link
    '''
    from urllib.parse import unquote
    # url= unquote(url) 
    import webbrowser
    print(url)
    webbrowser.open(url)
    
#obtener autorizacion 'code'
def authorize(api_url, client_id, client_secret, redirect_uri):
    # Request authentication URL
    from urllib.parse import quote, unquote
    # creds = read_creds('credentials.json')
    # redirect_uri = (creds['redirect_uri'])
    # redirect_uri = quote(redirect_uri)
    csrf_token = create_CSRF_token()
    api_url = 'https://www.linkedin.com/oauth/v2'
    params = {
        'response_type': 'code',
        'client_id': client_id,
        'redirect_uri': redirect_uri,
        'state': csrf_token,
        'scope': 'r_liteprofile%20r_emailaddress%20w_member_social'
    }
    headers = {'content-type': 'application/x-www-form-urlencoded'}
    # url = f'{api_url}/authorization'
    # response = requests.post(url, params=params, headers=headers)
    from urllib.parse import urlencode
    # url = f'{api_url}/authorization?{urlencode(params)}'
    # response = requests.get(url)
    
    params_string = urlencode(params)
    
    # url = f"{api_url}/authorization?{params_string}"    
    # response = requests.get(url)
    
    # url = f'https://www.linkedin.com/oauth/v2/authorization?{params_string}'
    # response = requests.get(url)
    
    from urllib.request import urlopen
    
    # url = f'{api_url}/authorization?{urlencode(params)}'
    
    url = "https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id={}&redirect_uri={}&state=DCEeFWf45A53sdfKef437&scope=r_liteprofile%20r_emailaddress%20w_member_social".format(client_id, redirect_uri)

    response = requests.get(url)
    # response = urlopen(url)
    
    print(f'''
    The Browser will open to ask you to authorize the credentials.\n
    Since we have not setted up a server, you will get the error:\n
    This site canâ€™t be reached. localhost refused to connect.\n
    This is normal.\n
    You need to copy the URL where you are being redirected to.\n
    ''')

    open_url(response.url)

    # Get the authorization verifier code from the callback url
    redirect_response = input("Ingresa la url a la que fuiste redirigido: ")
    # redirect_response = input(redirect_uri)
    auth_code = parse_redirect_uri(redirect_response)
    return auth_code


def parse_redirect_uri(redirect_response, ):
    '''
    Parse redirect response into components.
    Extract the authorized token from the redirect uri.
    '''
    from urllib.parse import urlparse, parse_qs
    # LINKEDIN_CLIENT_ID = client_id
    # REDIRECT_URI = redirect_uri
    # url = "https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id={}&redirect_uri={}&state=DCEeFWf45A53sdfKef437&scope=r_liteprofile%20r_emailaddress%20w_member_social%20openid%20profile%20email".format(
    #     LINKEDIN_CLIENT_ID, REDIRECT_URI)
    url = urlparse(redirect_response)
    url = parse_qs(url.query)
    if 'code' in url:
        return url['code'][0]
    else:
        print("Error: 'code' key not found in the returned url.")
    


# Aqui se obtiene el access_token
def refresh_token(auth_code, client_id, client_secret, redirect_uri):
    '''
    Exchange a Refresh Token for a New Access Token.
    '''
    access_token_url = 'https://www.linkedin.com/oauth/v2/accessToken'

    data = {
        'grant_type': 'authorization_code',
        'code': auth_code,
        'redirect_uri': redirect_uri,
        'client_id': client_id,
        'client_secret': client_secret
    }

    response = requests.post(access_token_url, data=data, timeout=30)
    response = response.json()
    print(response)
    access_token = response['access_token']
    return access_token


def save_token(filename, data):
    '''
    Write token to credentials file.
    '''
    data = json.dumps(data, indent=4)
    with open(filename, 'w') as f:
        f.write(data)


def auth(credentials):
    '''
    Run the Authentication.
    If the access token exists, it will use it to skip browser auth.
    If not, it will open the browser for you to authenticate.
    You will have to manually paste the redirect URI in the prompt.
    '''
    creds = read_creds(credentials)
    print(creds)
    client_id, client_secret = creds['client_id'], creds['client_secret']
    redirect_uri = creds['redirect_uri']
    api_url = 'https://www.linkedin.com/oauth/v2'

    if 'access_token' not in creds:
        args = client_id, client_secret, redirect_uri        
        auth_code = authorize(api_url, *args)
        access_token = refresh_token(auth_code, *args)
        creds.update({'access_token': access_token})
        save_token(credentials, creds)
    else:
        access_token = creds['access_token']
    return access_token


def header(access_token):
    '''
    Make the headers to attach to the API call.
    '''
    headers = {
        'Authorization': f'Bearer {access_token}',
        'cache-control': 'no-cache',
        'X-Restli-Protocol-Version': '2.0.0'
    }
    return headers


def user_info(headers):
    '''
    Get user information from Linkedin
    '''
    response = requests.get('https://api.linkedin.com/v2/me', headers=headers)
    user_info = response.json()
    return user_info


# Get user id to make a UGC post
access_token = auth('credentials.json')
headers = header(access_token)
user_inf = user_info(headers)
urn = user_inf['id']
print('USER INFO:', user_inf)
print('URN:', urn)

if __name__ == '__main__':
    credentials = 'credentials.json'
    access_token = auth(credentials)










